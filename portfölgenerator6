import yfinance as yf
import cvxpy as cp
import numpy as np
import pandas as pd
from datetime import datetime
from textblob import TextBlob
from arch import arch_model
from scipy.stats import norm
from sklearn.ensemble import RandomForestRegressor
from keras.models import Sequential
from keras.layers import Dense, LSTM
from tensorflow.keras.optimizers import Adam
import random

# Funktion för sentimentanalys baserat på nyhetsflöde
def get_sentiment_score(ticker):
    headlines = [
        f"Positive sentiment on {ticker}",
        f"{ticker} earnings show growth",
        f"Concerns over {ticker}'s future",
    ]
    sentiment_score = 0
    for headline in headlines:
        sentiment_score += TextBlob(headline).sentiment.polarity
    return sentiment_score / len(headlines)

# Funktion för att hämta och bearbeta data med EWMA och GARCH för volatilitet
def load_data(symbols, start_date="2022-01-01", end_date=datetime.today().strftime('%Y-%m-%d'), decay=0.94):
    data = yf.download(symbols, start=start_date, end=end_date)
    adj_close = data['Adj Close']
    daily_returns = adj_close.pct_change().dropna()
    
    # Beräkna årlig avkastning
    annual_returns = daily_returns.mean() * 252
    
    # GARCH-modell för volatilitet
    garch_volatility = {}
    for symbol in symbols:
        model = arch_model(daily_returns[symbol] * 100, vol='Garch', p=1, q=1)
        garch_fitted = model.fit(disp="off")
        garch_volatility[symbol] = garch_fitted.conditional_volatility[-1] / 100
    
    # Kovariansmatris baserad på GARCH-volatilitet
    vol_array = np.array([garch_volatility[symbol] for symbol in symbols])
    cov_matrix = np.outer(vol_array, vol_array) * daily_returns.corr().values
    return annual_returns, cov_matrix, data

# Funktion för maskininlärning och prediktion av avkastning
def predict_returns_with_lstm(data, symbol):
    returns = data['Adj Close'][symbol].pct_change().dropna()
    X, y = [], []
    for i in range(60, len(returns)):
        X.append(returns[i-60:i].values)
        y.append(returns[i])
    X, y = np.array(X), np.array(y)
    X = X.reshape((X.shape[0], X.shape[1], 1))
    
    model = Sequential()
    model.add(LSTM(50, return_sequences=True, input_shape=(X.shape[1], 1)))
    model.add(LSTM(50))
    model.add(Dense(1))
    model.compile(optimizer=Adam(learning_rate=0.001), loss='mean_squared_error')
    
    model.fit(X, y, epochs=10, batch_size=16, verbose=0)
    
    return model.predict(X[-1].reshape(1, X.shape[1], 1))[0][0]

# Funktion för att generera signaler
def generate_signals(fundamentals, predictions, sentiment_scores):
    signals = {}
    for symbol in fundamentals.index:
        buy_signal = (
            fundamentals.loc[symbol, "PE"] < 15 and
            fundamentals.loc[symbol, "Profit Growth"] > 0.1 and
            predictions[symbol] > 0 and
            sentiment_scores[symbol] > 0
        )
        signals[symbol] = "Buy" if buy_signal else "Hold"
    return signals

# Funktion för reinforcement learning-agent
def reinforcement_learning_optimization(rewards, actions, states, gamma=0.9):
    q_table = {}
    for state in states:
        q_table[state] = [0 for _ in actions]
    for i in range(len(rewards) - 1, -1, -1):
        state, action = states[i], actions[i]
        q_table[state][action] = rewards[i] + gamma * max(q_table[state])
    return q_table

# Användarinput och datahämtning
symbols = input("Ange aktiesymboler, separerade med kommatecken (t.ex. 'AAPL, MSFT, TSLA'): ").split(',')
total_capital = float(input("Ange totalt investerbart kapital i kronor: "))

# Hämta data och beräkna optimerad portfölj
annual_returns, cov_matrix, data = load_data(symbols)
predictions = {symbol: predict_returns_with_lstm(data, symbol) for symbol in symbols}
sentiment_scores = {symbol: get_sentiment_score(symbol) for symbol in symbols}
signals = generate_signals(fundamentals, predictions, sentiment_scores)

# Dynamisk optimering och reinforcement learning för viktjustering
rewards = [annual_returns[symbol] for symbol in symbols]
actions = [0, 1]
states = list(signals.values())
q_table = reinforcement_learning_optimization(rewards, actions, states)

# Visa köp/säljsignaler och optimala vikter för automatiserad handel
print("\nKöp/säljsignaler och optimerade vikter för varje aktie:")
for symbol, signal in signals.items():
    print(f"{symbol}: {signal}")
for state, weights in q_table.items():
    print(f"State {state}: Optimal Weights {weights}")
